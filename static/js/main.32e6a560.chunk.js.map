{"version":3,"sources":["components/Nav.js","components/Pokemon.js","components/PokeAjax.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","className","Pokemon","props","src","avatar","alt","name","types","PokeAjax","state","pokemons","fetch","then","res","json","results","forEach","el","url","pokemon","id","sprites","front_default","e","length","push","type","setState","this","map","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAgBeA,MAXf,WAEI,OACI,qBAAKC,UAAU,MAAf,SACI,4C,mCCWGC,MAlBf,SAAiBC,GACb,OACI,0BAASF,UAAU,QAAnB,UACI,qBAAKA,UAAU,iBAAf,SACC,qBAAKG,IAAKD,EAAME,OAAQC,IAAKH,EAAMI,SAEpC,6BAAKJ,EAAMI,OACX,sBAAKN,UAAU,QAAf,UACI,8BACA,mBAAGA,UAAU,OAAb,SAAqBE,EAAMK,MAAM,OAEjC,8BAAK,mBAAGP,UAAU,OAAb,SAAqBE,EAAMK,MAAM,cCVjCC,E,4MAEjBC,MAAO,CACHC,SAAU,I,uDAKb,WAAoB,IAAD,OAOhBC,MAFU,yDAGTC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GAEFA,EAAKC,QAAQC,SAAQ,SAACC,GACnBN,MAAMM,EAAGC,KACPN,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GAGH,IAUIK,EAAU,CACVC,GAAIN,EAAKM,GACTd,KAAMQ,EAAKR,KACXF,OAAOU,EAAKO,QAAQC,cACpBf,MAdU,WAEd,IADI,IAAIA,EAAQ,GACRgB,EAAI,EAAGA,EAAIT,EAAKP,MAAMiB,OAAQD,IAElChB,EAAMkB,KAAKX,EAAKP,MAAMgB,GAAGG,KAAKpB,MAE9B,OAAOC,EAQAA,IAIRG,EAAQ,sBAAO,EAAKD,MAAMC,UAAlB,CAA4BS,IAExC,EAAKQ,SAAS,CAACjB,wB,oBAQ7B,WACG,OACI,mCACCkB,KAAKnB,MAAMC,SAASmB,KAAI,SAACZ,GAAD,OACrB,cAAC,EAAD,CAAqBX,KAAMW,EAAGX,KAAMF,OAAQa,EAAGb,OAAQG,MAAOU,EAAGV,OAAnDU,EAAGG,a,GAzDKU,a,MCgBvBC,MAbf,WACE,OACE,sBAAK/B,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,MAEF,yBAASA,UAAU,YAAnB,SACE,cAAC,EAAD,UCDOgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.32e6a560.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\n// this component contenting \r\n\r\nfunction Nav(){\r\n\r\n    return (\r\n        <div className=\"nav\">\r\n            <h1>Pokedex</h1>\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default Nav;","import React from \"react\";\r\n\r\nfunction Pokemon(props){\r\n    return(\r\n        <article className=\"cards\">\r\n            <div className=\"background-img\">\r\n            {<img src={props.avatar} alt={props.name}/>}\r\n            </div>\r\n            <h1>{props.name}</h1>\r\n            <div className=\"types\">\r\n                <div>\r\n                <p className=\"type\">{props.types[0]}</p>\r\n                </div>\r\n                <div><p className=\"type\">{props.types[1]}</p></div>\r\n        \r\n            </div>\r\n        </article>\r\n    );\r\n}\r\n\r\nexport default Pokemon;","import React, {Component} from \"react\";\r\nimport Pokemon from \"./Pokemon\";\r\n\r\nexport default class PokeAjax extends Component{\r\n\r\n    state ={\r\n        pokemons: [],\r\n    };\r\n\r\n    // componentDitMount allow render after component already been in DOM Three.\r\n\r\n     componentDidMount(){\r\n\r\n        // parameter limit is the max of elements that api will show \r\n        // parameter offset means set since which place the api will return result\r\n\r\n        let url = \"https://pokeapi.co/api/v2/pokemon/?limit=150&offset=0\";\r\n\r\n        fetch(url)\r\n        .then(res => res.json())\r\n        .then(json => {\r\n            // this forEach will read all objects in prop result\r\n            json.results.forEach((el) =>{\r\n               fetch(el.url)\r\n                .then((res) => res.json())\r\n                .then((json) =>{\r\n      \r\n\r\n                    const types = () =>{\r\n                        let types = [];\r\n                    for(let e = 0; e < json.types.length; e++){\r\n                        \r\n                        types.push(json.types[e].type.name);\r\n                    }\r\n                        return types;\r\n                        \r\n                    }\r\n\r\n                    let pokemon = {\r\n                        id: json.id,\r\n                        name: json.name,\r\n                        avatar:json.sprites.front_default,\r\n                        types: types(),\r\n                      \r\n                   }\r\n            \r\n                   let pokemons = [...this.state.pokemons, pokemon];\r\n\r\n                   this.setState({pokemons});\r\n\r\n                })\r\n\r\n            });\r\n        })\r\n    }\r\n\r\n     render(){\r\n        return(\r\n            <>\r\n            {this.state.pokemons.map((el) =>(\r\n                <Pokemon key={el.id} name={el.name} avatar={el.avatar} types={el.types}   />\r\n            ))}\r\n            \r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n}","import Nav from \"./components/Nav\";\nimport PokeAjax from \"./components/PokeAjax\";\nimport \"./App.css\"\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Nav />\n      </header>\n      <section className=\"conteiner\">\n        <PokeAjax />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}